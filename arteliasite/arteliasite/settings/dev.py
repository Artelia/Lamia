"""
Django settings for arteliasite project.

Generated by 'django-admin startproject' using Django 3.0.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os, sys, logging
import logging.config
from django.conf.urls.static import static
from .default import *

lamiapath = os.path.normpath(
    os.path.join(os.path.dirname(__file__), "..", "..", "..", "..")
)
sys.path.append(lamiapath)
from Lamia.secrets import postgis_aws as pgsecret, djangosecrets, aws_secrets

USE_S3 = True

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = djangosecrets.SECRET_KEY

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True


# Application definition


# WEBPACK_LOADER = {
#     "DEFAULT": {
#         "BUNDLE_DIR_NAME": "lamiacarto/dev/",
#         # "BUNDLE_DIR_NAME": "dist/",
#         # 'STATS_FILE': os.path.join(BASE_DIR, 'pvr', 'static','bundles', 'webpack-stats.json'),
#         "STATS_FILE": os.path.join(BASE_DIR, "lamiacarto", "webpack-stats.json"),
#     }
# }

ALLOWED_HOSTS = djangosecrets.ALLOWED_HOSTS

CORS_ORIGIN_WHITELIST = [
    "http://127.0.0.1:8000",
]

ROOT_URLCONF = "arteliasite.urls"


WSGI_APPLICATION = "arteliasite.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# DATABASES = {
#     "default": {
#         "ENGINE": "django.db.backends.sqlite3",
#         "NAME": os.path.join(BASE_DIR, "db.sqlite3"),
#     }
# }

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": pgsecret.dbname,
        "USER": pgsecret.user,
        "PASSWORD": pgsecret.password,
        "HOST": pgsecret.host,
        "PORT": pgsecret.port,
        "OPTIONS": {"application_name": "lamiadjango"},
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    # {"NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",},
    # {"NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",},
    # {"NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",},
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/static/"

STATICFILES_DIRS = [
    os.path.abspath(os.path.join(BASE_DIR, "node_modules")),  # for bootstrap
    os.path.abspath(os.path.join(BASE_DIR, "staticbundles")),  # for bootstrap
    ("forms", os.path.abspath(os.path.join(BASE_DIR, "..", "config"))),
    ("img", os.path.join(BASE_DIR, "lamiacarto", "static", "assets", "img")),
]

STATIC_ROOT = os.path.normpath(os.path.join(BASE_DIR, "static"))


if USE_S3:
    AWS_ACCESS_KEY_ID = aws_secrets.AWS_ACCESS_KEY_ID
    AWS_SECRET_ACCESS_KEY = aws_secrets.AWS_SECRET_ACCESS_KEY
    AWS_STORAGE_BUCKET_NAME = aws_secrets.AWS_STORAGE_BUCKET_NAME
    AWS_S3_REGION_NAME = aws_secrets.AWS_S3_REGION_NAME

    # AWS_S3_OBJECT_PARAMETERS = aws_secrets.AWS_S3_OBJECT_PARAMETERS

    AWS_S3_HOST = f"{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}"
    AWS_S3_URL = (
        f"https://{AWS_STORAGE_BUCKET_NAME}.s3.{AWS_S3_REGION_NAME}.amazonaws.com/"
    )
    # print("*", AWS_S3_URL)
    # PUBLIC_MEDIA_LOCATION = ""
    # MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/{PUBLIC_MEDIA_LOCATION}/"
    # MEDIA_URL = f"https://{AWS_S3_CUSTOM_DOMAIN}/"
    # AWS_MEDIA_DIR = ""
    # MEDIA_URL = AWS_S3_URL + AWS_MEDIA_DIR + '/'
    # MEDIA_ROOT = AWS_S3_URL
    MEDIA_URL = AWS_S3_URL
    # MEDIA_URL = "/media/"

    DEFAULT_FILE_STORAGE = "arteliasite.storage_backends.PublicMediaStorage"

else:
    MEDIA_ROOT = os.path.join("C:/", "media")
    MEDIA_URL = "/media/"


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        # "console": {"format": "%(thread)d-%(name)-12s %(levelname)-8s %(message)s"},
        "console": {
            "format": "%(asctime)s :: %(thread)d :: %(levelname)s :: %(module)s :: %(funcName)s :: %(message)s",
            "datefmt": "%H:%M:%S",
        },
        "file": {"format": "%(asctime)s %(name)-12s %(levelname)-8s %(message)s"},
    },
    "handlers": {
        "console": {"class": "logging.StreamHandler", "formatter": "console",},
    },
    "loggers": {
        "": {"handlers": ["console"], "level": "DEBUG", "propagate": True,},
        "Lamia.iface.qgscanvas.ifaceqgiscanvas": {
            "handlers": ["console"],
            "level": "DEBUG",
            "propagate": True,
            "formatter": "console",
        },
    },
}

logging.config.dictConfig(LOGGING)

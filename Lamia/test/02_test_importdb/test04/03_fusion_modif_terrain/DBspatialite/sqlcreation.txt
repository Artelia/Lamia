PRAGMA foreign_keys = ON
CREATE TABLE Basedonnees(pk_basedonnees INTEGER PRIMARY KEY AUTOINCREMENT,metier TEXT,repertoireressources TEXT,crs INTEGER,version TEXT,workversion TEXT);
CREATE TABLE Revision(pk_revision INTEGER PRIMARY KEY AUTOINCREMENT,datetimerevision TEXT,commentaire TEXT);
CREATE TABLE Objet(pk_objet INTEGER PRIMARY KEY AUTOINCREMENT,id_objet INTEGER,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,datetimecreation TEXT,datetimemodification TEXT,datetimedestruction TEXT,commentaire TEXT,libelle TEXT,importid INTEGER,importtable TEXT,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE Marche(pk_marche INTEGER PRIMARY KEY AUTOINCREMENT,id_marche INTEGER,lpk_objet INTEGER,datemarche TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Evenement(pk_evenement INTEGER PRIMARY KEY AUTOINCREMENT,id_evenement INTEGER,lpk_objet INTEGER,description TEXT,gravite INTEGER,ref TEXT,listeparametres TEXT,parametres TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Descriptionsystem(pk_descriptionsystem INTEGER PRIMARY KEY AUTOINCREMENT,id_descriptionsystem INTEGER,lpk_objet INTEGER,importancestrat TEXT,etatfonct TEXT,qualitegeolocXY REAL,qualiteGeolocZ INTEGER,dateGeoloc TEXT,sourceGeoloc TEXT,parametres TEXT,listeparametres TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Intervenant(pk_intervenant INTEGER PRIMARY KEY AUTOINCREMENT,id_intervenant INTEGER,lpk_objet INTEGER,nom TEXT,societe TEXT,adresse TEXT,fax TEXT,tel TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Zonegeo(pk_zonegeo INTEGER PRIMARY KEY AUTOINCREMENT,id_zonegeo INTEGER,lpk_objet INTEGER,pays TEXT,region TEXT,commune TEXT,populations TEXT,contextesocioeco TEXT,importancesociale INTEGER,importanceindustrielle INTEGER,typezonegeo TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
SELECT AddGeometryColumn('Zonegeo','geom',3945, 'MULTIPOLYGON', 'XY');
CREATE TABLE Desordre(pk_desordre INTEGER PRIMARY KEY AUTOINCREMENT,id_desordre INTEGER,lpk_objet INTEGER,groupedesordre TEXT,impact TEXT,gravite TEXT,priorite TEXT,risques TEXT,lid_descriptionsystem INTEGER,cote TEXT,position TEXT,catdes TEXT,typedes TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
SELECT AddGeometryColumn('Desordre','geom',3945, 'LINESTRING', 'XY');
CREATE TABLE Interventiontiers(pk_interventiontiers INTEGER PRIMARY KEY AUTOINCREMENT,id_interventiontiers INTEGER,lpk_objet INTEGER,urgence TEXT,estimationcouts REAL,estimationduree REAL,dateestimationecheance TEXT,phase TEXT,datedebut TEXT,datefin TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Ressource(pk_ressource INTEGER PRIMARY KEY AUTOINCREMENT,id_ressource INTEGER,lpk_objet INTEGER,source TEXT,dateressource TEXT,contactadresse TEXT,contactnom TEXT,contactmail TEXT,contacttel1 TEXT,contacttel2 TEXT,file TEXT,numphoto INTEGER,description TEXT,lid_marche INTEGER,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Noeud(pk_noeud INTEGER PRIMARY KEY AUTOINCREMENT,id_noeud INTEGER,lpk_descriptionsystem INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES Descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('Noeud','geom',3945, 'POINT', 'XY');
CREATE TABLE Equipement(pk_equipement INTEGER PRIMARY KEY AUTOINCREMENT,id_equipement INTEGER,lpk_descriptionsystem INTEGER,categorie TEXT,lid_ressource1 INTEGER,lid_descriptionsystem INTEGER,typeequipement TEXT,implantation TEXT,ecoulement TEXT,utilisation TEXT,dimverti REAL,dimhori REAL,securite TEXT,cote TEXT,position TEXT,FOREIGN KEY(lpk_descriptionsystem) REFERENCES Descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('Equipement','geom',3945, 'LINESTRING', 'XY');
CREATE TABLE Profil(pk_profil INTEGER PRIMARY KEY AUTOINCREMENT,id_profil INTEGER,lpk_descriptionsystem INTEGER,date TEXT,type TEXT,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES Descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('Profil','geom',3945, 'LINESTRING', 'XY');
CREATE TABLE Infralineaire(pk_infralineaire INTEGER PRIMARY KEY AUTOINCREMENT,id_infralineaire INTEGER,lpk_descriptionsystem INTEGER,lid_ressource_1 INTEGER,lid_descriptionsystem_1 INTEGER,lid_descriptionsystem_2 INTEGER,description1 TEXT,description2 TEXT,classement TEXT,aubaredelargeur TEXT,aubaredevegherbacee TEXT,aubaredevegarbustive TEXT,aubaredevegarboree TEXT,aubaredecommentaire TEXT,lid_ressource_2 INTEGER,lid_ressource_3 INTEGER,lid_ressource_4 INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES Descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('Infralineaire','geom',3945, 'LINESTRING', 'XY');
CREATE TABLE Environnement(pk_environnement INTEGER PRIMARY KEY AUTOINCREMENT,id_environnement INTEGER,lpk_descriptionsystem INTEGER,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES Descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('Environnement','geom',3945, 'LINESTRING', 'XY');
CREATE TABLE Observation(pk_observation INTEGER PRIMARY KEY AUTOINCREMENT,id_observation INTEGER,lpk_objet INTEGER,datetimeobservation TEXT,source TEXT,nombre INTEGER,gravite TEXT,evolution TEXT,typesuite TEXT,precisionsuite TEXT,commentairesuite TEXT,lid_marche INTEGER,lid_desordre INTEGER,oh_etatvantellerie TEXT,oh_etatvantelleriecom TEXT,oh_etatgeniecivil TEXT,oh_etatgeniecivilcom TEXT,oh_testmanoeuvre TEXT,oh_testmanoeuvrecom TEXT,oh_etancheite INTEGER,oh_etancheitecom TEXT,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Etudestrategie(pk_etudestrategie INTEGER PRIMARY KEY AUTOINCREMENT,id_etudestrategie INTEGER,lpk_objet INTEGER,investissements TEXT,chronologie TEXT,note TEXT,lid_marche INTEGER,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Rapport(pk_rapport INTEGER PRIMARY KEY AUTOINCREMENT,id_rapport INTEGER,lpk_ressource INTEGER,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
SELECT AddGeometryColumn('Rapport','geom',3945, 'MULTIPOLYGON', 'XY');
CREATE TABLE Topographie(pk_topographie INTEGER PRIMARY KEY AUTOINCREMENT,id_topographie INTEGER,lpk_ressource INTEGER,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
CREATE TABLE Modele(pk_modele INTEGER PRIMARY KEY AUTOINCREMENT,id_modele INTEGER,lpk_ressource INTEGER,logiciel TEXT,scenario TEXT,conclusions TEXT,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
CREATE TABLE Rasters(pk_rasters INTEGER PRIMARY KEY AUTOINCREMENT,id_rasters INTEGER,lpk_ressource INTEGER,typeraster TEXT,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
CREATE TABLE Graphique(pk_graphique INTEGER PRIMARY KEY AUTOINCREMENT,id_graphique INTEGER,lpk_ressource INTEGER,typegraphique TEXT,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
CREATE TABLE Photo(pk_photo INTEGER PRIMARY KEY AUTOINCREMENT,id_photo INTEGER,lpk_ressource INTEGER,typephoto TEXT,FOREIGN KEY(lpk_ressource) REFERENCES Ressource(pk_ressource));
SELECT AddGeometryColumn('Photo','geom',3945, 'POINT', 'XY');
CREATE TABLE Travaux(pk_travaux INTEGER PRIMARY KEY AUTOINCREMENT,id_travaux INTEGER,lpk_objet INTEGER,urgence TEXT,estimationcouts REAL,estimationduree REAL,dateestimationecheance TEXT,phase TEXT,datedebut TEXT,datefin TEXT,lid_observation INTEGER,lk_marche INTEGER,FOREIGN KEY(lpk_objet) REFERENCES Objet(pk_objet));
CREATE TABLE Tcetudetravaux(pk_tcetudetravaux INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_etudestrategie INTEGER,lid_travaux INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE Graphiquedata(pk_graphiquedata INTEGER PRIMARY KEY AUTOINCREMENT,id_graphiquedata INTEGER,lpk_graphique INTEGER,typedata TEXT,x REAL,y REAL,z REAL,index1 TEXT,index2 TEXT,index3 TEXT,index4 TEXT,FOREIGN KEY(lpk_graphique) REFERENCES Graphique(pk_graphique));
CREATE TABLE Tcobjetintervenant(pk_tcobjetintervenant INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_intervenant INTEGER,lid_objet INTEGER,fonction TEXT,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE Tcobjetzonegeo(pk_tcobjetzonegeo INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_zonegeo INTEGER,lid_objet INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE Pointtopo(pk_pointtopo INTEGER PRIMARY KEY AUTOINCREMENT,id_pointtopo INTEGER,lpk_topographie INTEGER,typepointtopo TEXT,x REAL,y REAL,zgps REAL,zwgs84 REAL,raf09 REAL,zmngf REAL,precision TEXT,dx REAL,dy REAL,dz REAL,hauteurperche REAL,FOREIGN KEY(lpk_topographie) REFERENCES Topographie(pk_topographie));
SELECT AddGeometryColumn('Pointtopo','geom',3945, 'POINT', 'XY');
CREATE TABLE Tctravauxdescriptionsystem(pk_tctravauxdescriptionsystem INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_travaux INTEGER,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE Tcobjetressource(pk_tcobjetressource INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_ressource INTEGER,lid_objet INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES Revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES Revision(pk_revision));
CREATE TABLE auth_permission(id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT,content_type_id INTEGER);
CREATE TABLE auth_group(id INTEGER PRIMARY KEY AUTOINCREMENT,name TEXT);
CREATE TABLE auth_user_user_permissions(id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER,permission_id INTEGER);
CREATE TABLE auth_group_permissions(id INTEGER PRIMARY KEY AUTOINCREMENT,group_id INTEGER,permission_id INTEGER);
CREATE TABLE django_content_type(id INTEGER PRIMARY KEY AUTOINCREMENT,app_label TEXT,model TEXT);
CREATE TABLE auth_user_groups(id INTEGER PRIMARY KEY AUTOINCREMENT,user_id INTEGER,group_id INTEGER);
CREATE TABLE bdd(id_bdd INTEGER PRIMARY KEY AUTOINCREMENT,id_objet INTEGER,id_ressource INTEGER,bdd TEXT);
CREATE TABLE carto_layer(id_layer INTEGER PRIMARY KEY AUTOINCREMENT,id_objet INTEGER,name TEXT,ref TEXT,store TEXT);
CREATE TABLE django_admin_log(id INTEGER PRIMARY KEY AUTOINCREMENT,action_time DATE,user_id INTEGER,object_id TEXT,object_repr TEXT,action_flag INTEGER,change_message TEXT,content_type_id INTEGER);
CREATE TABLE siartelia(id_siartelia INTEGER PRIMARY KEY AUTOINCREMENT);
CREATE TABLE projet(id_projet INTEGER PRIMARY KEY AUTOINCREMENT,nom TEXT,datatype TEXT,version REAL,dateversion DATE,referantartelia TEXT,contactartelia TEXT,datecreation DATE,client TEXT,contactclient TEXT,localisation TEXT,nomDB TEXT);
CREATE TABLE django_session(session_key TEXT,session_data TEXT,expire_date DATE);
CREATE TABLE django_migrations(id INTEGER PRIMARY KEY AUTOINCREMENT,app TEXT,name TEXT,applied DATE);
CREATE TABLE messagetiers(id_messagetiers INTEGER PRIMARY KEY AUTOINCREMENT,pub_date DATE,objet TEXT,sender TEXT,text TEXT,destinataire TEXT,id_objet INTEGER,lu INTEGER);
CREATE TABLE auth_user(id INTEGER PRIMARY KEY AUTOINCREMENT,password TEXT,username TEXT,first_name TEXT,last_name TEXT,email TEXT,last_login DATE,date_joined DATE,is_staff INTEGER,is_active INTEGER,is_superuser INTEGER);
CREATE TABLE utilisateur(id_utilisateur INTEGER PRIMARY KEY AUTOINCREMENT,id INTEGER,lk_projet INTEGER,FOREIGN KEY(lk_projet) REFERENCES Projet(id_projet));
CREATE VIEW Noeud_django AS SELECT Noeud.*,Descriptionsystem.*,  Objet.* FROM Noeud INNER JOIN Descriptionsystem ON Noeud.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet   WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('noeud_django','geom','pk_noeud','noeud','geom',0)
CREATE VIEW Noeud_qgis AS SELECT Noeud.*,Descriptionsystem.*,  Objet.* FROM Noeud INNER JOIN Descriptionsystem ON Noeud.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('noeud_qgis','geom','pk_noeud','noeud','geom',0)
CREATE VIEW Marche_django AS SELECT  Marche.*, Objet.*  FROM Marche INNER JOIN Objet ON Marche.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Marche_qgis AS SELECT Marche.*, Objet.*  FROM Marche INNER JOIN Objet ON Marche.lpk_objet = Objet.pk_objet
CREATE VIEW Equipement_django AS SELECT  Equipement.*,  Descriptionsystem.*,Objet.*  FROM Equipement INNER JOIN Descriptionsystem ON Equipement.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('equipement_django','geom','pk_equipement','equipement','geom',0)
CREATE VIEW Equipement_qgis AS SELECT Equipement.*,  Descriptionsystem.*,Objet.* FROM Equipement INNER JOIN Descriptionsystem ON Equipement.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('equipement_qgis','geom','pk_equipement','equipement','geom',0)
CREATE VIEW Rapport_django AS SELECT Rapport.*, Ressource.*, Objet.*   FROM Rapport INNER JOIN Ressource ON Rapport.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('rapport_django','geom','pk_rapport','rapport','geom',0)
CREATE VIEW Rapport_qgis AS SELECT Rapport.*, Ressource.*, Objet.*  FROM Rapport INNER JOIN Ressource ON Rapport.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('rapport_qgis','geom','pk_rapport','rapport','geom',0)
CREATE VIEW Profil_django AS SELECT Profil.*, Descriptionsystem.*,  Objet.* FROM Profil INNER JOIN Descriptionsystem ON Profil.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('profil_django','geom','pk_profil','profil','geom',0)
CREATE VIEW Profil_qgis AS SELECT Profil.*, Descriptionsystem.*,  Objet.*  FROM Profil INNER JOIN Descriptionsystem ON Profil.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('profil_qgis','geom','pk_profil','profil','geom',0)
CREATE VIEW Topographie_django AS SELECT Topographie.*, Ressource.*, Objet.* FROM Topographie INNER JOIN Ressource ON Topographie.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Topographie_qgis AS SELECT Topographie.*, Ressource.*, Objet.* FROM Topographie INNER JOIN Ressource ON Topographie.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
CREATE VIEW Graphiquedata_django AS SELECT Graphiquedata.*, Graphique.*, Ressource.*, Objet.* FROM Graphiquedata INNER JOIN  Graphique ON Graphiquedata.lpk_graphique = Graphique.pk_graphique INNER JOIN Ressource ON Graphique.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL AND Objet.lpk_revision_end IS NULL
CREATE VIEW Graphiquedata_qgis AS SELECT Graphiquedata.*, Graphique.*, Ressource.*, Objet.* FROM Graphiquedata INNER JOIN  Graphique ON Graphiquedata.lpk_graphique = Graphique.pk_graphique INNER JOIN Ressource ON Graphique.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Desordre_django AS SELECT Desordre.* , Objet.* FROM Desordre INNER JOIN Objet ON Desordre.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('desordre_django','geom','pk_desordre','desordre','geom',0)
CREATE VIEW Desordre_qgis AS SELECT  Desordre.* , Objet.* FROM Desordre INNER JOIN Objet ON Desordre.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('desordre_qgis','geom','pk_desordre','desordre','geom',0)
CREATE VIEW Interventiontiers_django AS SELECT Interventiontiers.*, Objet.* FROM  Interventiontiers INNER JOIN Objet ON Interventiontiers.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Interventiontiers_qgis AS SELECT Interventiontiers.*, Objet.* FROM  Interventiontiers INNER JOIN Objet ON Interventiontiers.lpk_objet = Objet.pk_objet
CREATE VIEW Objet_django AS SELECT * FROM Objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Objet_qgis AS SELECT * FROM Objet
CREATE VIEW bdd_django AS SELECT  Bdd.*, Objet.*, Ressource.* FROM Bdd INNER JOIN Ressource ON Ressource.id_ressource = Bdd.id_ressource INNER JOIN  Objet ON  Bdd.id_objet = Objet.id_objet
CREATE VIEW Evenement_django AS SELECT  Evenement.*, Objet.* FROM Evenement INNER JOIN Objet ON Evenement.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Evenement_qgis AS SELECT  Evenement.*, Objet.* FROM Evenement INNER JOIN Objet ON Evenement.lpk_objet = Objet.pk_objet
CREATE VIEW carto_layer_django AS SELECT  carto_layer.* , Objet.datetimecreation, Objet.datetimedestruction, Objet.commentaire, Objet.libelle FROM carto_layer INNER JOIN OBJET ON carto_layer.id_objet = Objet.id_objet
CREATE VIEW carto_layer_qgis AS SELECT  carto_layer.* , Objet.datetimecreation, Objet.datetimedestruction FROM carto_layer INNER JOIN OBJET ON carto_layer.id_objet = carto_layer.id_objet
CREATE VIEW Basedonnees_django AS SELECT * FROM Basedonnees
CREATE VIEW Infralineaire_django AS SELECT Infralineaire.*,Descriptionsystem.*,  Objet.*  FROM Infralineaire INNER JOIN Descriptionsystem ON Infralineaire.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('infralineaire_django','geom','pk_infralineaire','infralineaire','geom',0)
CREATE VIEW Infralineaire_qgis AS SELECT Infralineaire.*,Descriptionsystem.*,  Objet.*  FROM Infralineaire INNER JOIN Descriptionsystem ON Infralineaire.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('infralineaire_qgis','geom','pk_infralineaire','infralineaire','geom',0)
CREATE VIEW Modele_django AS SELECT Modele.* ,Ressource.*, Objet.*  FROM Modele INNER JOIN Ressource ON Modele.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Modele_qgis AS SELECT Modele.* ,Ressource.*, Objet.*  FROM Modele INNER JOIN Ressource ON Modele.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
CREATE VIEW Descriptionsystem_django AS SELECT Descriptionsystem.*, Objet.*  FROM Descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Descriptionsystem_qgis AS SELECT Descriptionsystem.*, Objet.*  FROM Descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
CREATE VIEW Environnement_django AS SELECT Environnement.*, Descriptionsystem.*, Objet.*   FROM Environnement INNER JOIN Descriptionsystem ON Environnement.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('environnement_django','geom','pk_environnement','environnement','geom',0)
CREATE VIEW Environnement_qgis AS SELECT Environnement.*, Descriptionsystem.*, Objet.*   FROM Environnement INNER JOIN Descriptionsystem ON Environnement.lpk_descriptionsystem = Descriptionsystem.pk_descriptionsystem INNER JOIN Objet ON Descriptionsystem.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('environnement_qgis','geom','pk_environnement','environnement','geom',0)
CREATE VIEW Observation_django AS SELECT Observation.* , Objet.* FROM Observation INNER JOIN Objet ON Observation.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Observation_qgis AS SELECT Observation.* , Objet.* FROM Observation INNER JOIN Objet ON Observation.lpk_objet = Objet.pk_objet
CREATE VIEW Rasters_django AS SELECT Rasters.*, Ressource.*, Objet.* FROM Rasters INNER JOIN Ressource ON Rasters.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Rasters_qgis AS SELECT Rasters.*, Ressource.*, Objet.*FROM Rasters INNER JOIN Ressource ON Rasters.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
CREATE VIEW Graphique_django AS SELECT Graphique.*, Ressource.*,  Objet.*  FROM Graphique INNER JOIN Ressource ON Graphique.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Graphique_qgis AS SELECT Graphique.*, Ressource.*,  Objet.*  FROM Graphique INNER JOIN Ressource ON Graphique.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
CREATE VIEW Intervenant_django AS SELECT  Intervenant.*, Objet.*  FROM Intervenant INNER JOIN Objet ON Intervenant.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Intervenant_qgis AS SELECT Intervenant.*, Objet.*  FROM Intervenant INNER JOIN Objet ON Intervenant.lpk_objet = Objet.pk_objet
CREATE VIEW Pointtopo_django AS SELECT Pointtopo.*, Topographie.*, Ressource.*, Objet.* FROM Pointtopo INNER JOIN  Topographie ON Pointtopo.lpk_topographie = Topographie.pk_topographie INNER JOIN Ressource ON Topographie.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL AND Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('pointtopo_django','geom','pk_pointtopo','pointtopo','geom',0)
CREATE VIEW Pointtopo_qgis AS SELECT Pointtopo.*, Topographie.*, Ressource.*, Objet.* FROM Pointtopo INNER JOIN  Topographie ON Pointtopo.lpk_topographie = Topographie.pk_topographie INNER JOIN Ressource ON Topographie.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('pointtopo_qgis','geom','pk_pointtopo','pointtopo','geom',0)
CREATE VIEW Etudestrategie_django AS SELECT  Etudestrategie.*, Objet.* FROM Etudestrategie INNER JOIN Objet ON Etudestrategie.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Etudestrategie_qgis AS SELECT  Etudestrategie.*, Objet.* FROM Etudestrategie INNER JOIN Objet ON Etudestrategie.lpk_objet = Objet.pk_objet
CREATE VIEW messagetiers_django AS SELECT  Messagetiers.* , Objet.datetimecreation, Objet.datetimedestruction, Objet.commentaire, Objet.libelle FROM Messagetiers INNER JOIN OBJET ON Messagetiers.id_objet = Objet.id_objet
CREATE VIEW messagetiers_qgis AS SELECT  Messagetiers.* , Objet.datetimecreation, Objet.datetimedestruction FROM Messagetiers INNER JOIN OBJET ON Messagetiers.id_objet = Messagetiers.id_objet
CREATE VIEW Photo_django AS SELECT Photo.*, Ressource.*, Objet.*  FROM Photo INNER JOIN Ressource ON Photo.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('photo_django','geom','pk_photo','photo','geom',0)
CREATE VIEW Photo_qgis AS SELECT Photo.*, Ressource.*, Objet.*   FROM Photo INNER JOIN Ressource ON Photo.lpk_ressource = Ressource.pk_ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('photo_qgis','geom','pk_photo','photo','geom',0)
CREATE VIEW Travaux_django AS SELECT Travaux.* , Objet.* FROM  Travaux INNER JOIN Objet ON Travaux.lpk_objet = Objet.pk_objet  WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Travaux_qgis AS SELECT  Travaux.* , Objet.*  FROM  Travaux INNER JOIN Objet ON Travaux.lpk_objet = Objet.pk_objet
CREATE VIEW Ressource_django AS SELECT  Ressource.*, Objet.* FROM Ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet   WHERE Objet.lpk_revision_end IS NULL
CREATE VIEW Ressource_qgis AS SELECT Ressource.*, Objet.*  FROM Ressource INNER JOIN Objet ON Ressource.lpk_objet = Objet.pk_objet
CREATE VIEW Zonegeo_django AS SELECT Zonegeo.* , Objet.* FROM Zonegeo INNER JOIN Objet ON Zonegeo.lpk_objet = Objet.pk_objet WHERE Objet.lpk_revision_end IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('zonegeo_django','geom','pk_zonegeo','zonegeo','geom',0)
CREATE VIEW Zonegeo_qgis AS SELECT Zonegeo.* , Objet.*  FROM Zonegeo INNER JOIN Objet ON Zonegeo.lpk_objet = Objet.pk_objet
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('zonegeo_qgis','geom','pk_zonegeo','zonegeo','geom',0)

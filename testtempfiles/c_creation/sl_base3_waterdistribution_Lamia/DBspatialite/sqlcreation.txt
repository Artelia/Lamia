CREATE TABLE database(pk_database INTEGER PRIMARY KEY AUTOINCREMENT,businessline TEXT,resourcesdirectory TEXT,crs INTEGER,baseversion TEXT,workversion TEXT,variant TEXT);
CREATE TABLE revision(pk_revision INTEGER PRIMARY KEY AUTOINCREMENT,datetimerevision TEXT,comment TEXT);
CREATE TABLE object(pk_object INTEGER PRIMARY KEY AUTOINCREMENT,id_object INTEGER,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,datetimecreation TEXT,datetimemodification TEXT,datetimedestruction TEXT,comment TEXT,name TEXT,importid INTEGER,importtable TEXT,lid_actor_creator INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE TABLE descriptionsystem(pk_descriptionsystem INTEGER PRIMARY KEY AUTOINCREMENT,id_descriptionsystem INTEGER,lpk_object INTEGER,strategicvalue TEXT,operational INTEGER,structuralstate TEXT,operationalstate TEXT,dateoperationalcreation TEXT,dateoperationalcreationupper TEXT,operationaldatecreationaccuracy TEXT,datetimeoperationaldestruction TEXT,geotrackingxyquality INTEGER,geotrackingzquality INTEGER,geotrackingdate TEXT,geotrackingsource TEXT,parameters TEXT,parameterslist TEXT,city TEXT,streetname TEXT,streetupname TEXT,streetdownname TEXT,streetcomment TEXT,lid_actor_1 INTEGER,lid_actor_2 INTEGER,lid_actor_3 INTEGER,lid_facility INTEGER,float_1 REAL,float_2 REAL,float_3 REAL,float_4 REAL,float_5 REAL,float_6 REAL,float_7 REAL,float_8 REAL,float_9 REAL,float_10 REAL,string_1 TEXT,string_2 TEXT,string_3 TEXT,string_4 TEXT,string_5 TEXT,string_6 TEXT,string_7 TEXT,string_8 TEXT,string_9 TEXT,string_10 TEXT,networktype TEXT,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE event(pk_event INTEGER PRIMARY KEY AUTOINCREMENT,id_event INTEGER,lpk_object INTEGER,description TEXT,severity INTEGER,ref TEXT,parameters TEXT,parameterslist TEXT,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE actor(pk_actor INTEGER PRIMARY KEY AUTOINCREMENT,id_actor INTEGER,lpk_object INTEGER,actorname TEXT,society TEXT,adress TEXT,fax TEXT,phone TEXT,function TEXT,mail TEXT,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE delivery(pk_delivery INTEGER PRIMARY KEY AUTOINCREMENT,id_delivery INTEGER,lpk_object INTEGER,deliverycategory TEXT,projectowner TEXT,contractor TEXT,datecontract TEXT,contractref TEXT,urgency TEXT,estimatedcost REAL,estimatedduration REAL,dateestimatedenddelivery TEXT,subdeliverystage TEXT,datedeliverystarting TEXT,datedeliveryending TEXT,deliverylocationcity TEXT,deliverylocationstreetname TEXT,lid_delivery INTEGER,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE geoarea(pk_geoarea INTEGER PRIMARY KEY AUTOINCREMENT,id_geoarea INTEGER,lpk_object INTEGER,country TEXT,region TEXT,city TEXT,population TEXT,contextesocioeco TEXT,importancesociale TEXT,importanceindustrielle TEXT,geoareatype TEXT,code_voie TEXT,nom_rue TEXT,nom_couche TEXT,lien TEXT,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
SELECT AddGeometryColumn('geoarea','geom',2154, 'MULTIPOLYGON', 'XY');
CREATE TABLE deficiency(pk_deficiency INTEGER PRIMARY KEY AUTOINCREMENT,id_deficiency INTEGER,lpk_object INTEGER,deficiencycategory TEXT,impact TEXT,priority TEXT,risks TEXT,sector1 TEXT,sector2 TEXT,sector3 TEXT,lid_descriptionsystem INTEGER,deficiencytype TEXT,deficiencyorigin TEXT,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
SELECT AddGeometryColumn('deficiency','geom',2154, 'LINESTRING', 'XY');
CREATE TABLE resource(pk_resource INTEGER PRIMARY KEY AUTOINCREMENT,id_resource INTEGER,lpk_object INTEGER,productor TEXT,datetimeresource TEXT,produceradress TEXT,producername TEXT,producermail TEXT,producerphone1 TEXT,producerphone2 TEXT,file TEXT,thumbnail BLOB,description TEXT,resourceindex INTEGER,lid_delivery INTEGER,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE edge(pk_edge INTEGER PRIMARY KEY AUTOINCREMENT,id_edge INTEGER,lpk_descriptionsystem INTEGER,lid_resource_1 INTEGER,lid_descriptionsystem_1 INTEGER,lid_descriptionsystem_2 INTEGER,diameterext REAL,diameterint REAL,depthtoppipe REAL,domain TEXT,laterals INTEGER,cathodicprotection INTEGER,flowtype TEXT,pipefunction TEXT,insulation INTEGER,insulationtype TEXT,insulationthickness INTEGER,beddingtype TEXT,valeur_neuf REAL,metersnumber INTEGER,lateralnumber INTEGER,material TEXT,joint TEXT,pressure_min REAL,pressure_max REAL,diameteraccuracy TEXT,materialaccuracy TEXT,pipepressurecategory TEXT,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('edge','geom',2154, 'LINESTRING', 'XY');
CREATE TABLE node(pk_node INTEGER PRIMARY KEY AUTOINCREMENT,id_node INTEGER,lpk_descriptionsystem INTEGER,lid_descriptionsystem_1 INTEGER,nodetype TEXT,diameterinlet REAL,diameteroutlet REAL,nodedepth REAL,nodeelevation REAL,nodefunction TEXT,nodesubtype TEXT,access TEXT,accessshape TEXT,hydrantfiredepartmentid INTEGER,hydrantoperatorid INTEGER,datetimehydranttest TEXT,hydrantconformity INTEGER,hydrantflow REAL,hydrantpressuretest REAL,datetimehydrantpressuretest TEXT,valveupstreamsetting REAL,valvedownstreamsetting REAL,nodeposition INTEGER,presenceoutlet TEXT,nodesize REAL,nodeemitter INTEGER,nodecountervalue INTEGER,retrofitable INTEGER,clamp INTEGER,localisation TEXT,presencestep INTEGER,accessibility INTEGER,manipulability INTEGER,brandname TEXT,brandref TEXT,maintenancefirm TEXT,remotemonitoring INTEGER,linkedfacilities TEXT,X REAL,dX REAL,Y REAL,dY REAL,Z REAL,dZ REAL,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('node','geom',2154, 'POINT', 'XY');
CREATE TABLE surface(pk_surface INTEGER PRIMARY KEY AUTOINCREMENT,id_surface INTEGER,surfacetype TEXT,lpk_descriptionsystem INTEGER,lid_descriptionsystem_1 INTEGER,lid_descriptionsystem_2 INTEGER,lid_descriptionsystem_3 INTEGER,lid_descriptionsystem_4 INTEGER,lid_descriptionsystem_5 INTEGER,lid_descriptionsystem_6 INTEGER,lid_descriptionsystem_7 INTEGER,lid_descriptionsystem_8 INTEGER,lid_descriptionsystem_9 INTEGER,lid_descriptionsystem_10 INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('surface','geom',2154, 'POLYGON', 'XY');
CREATE TABLE facility(pk_facility INTEGER PRIMARY KEY AUTOINCREMENT,id_facility INTEGER,lpk_descriptionsystem INTEGER,facilitytype TEXT,lid_resource_1 INTEGER,lid_descriptionsystem_1 INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('facility','geom',2154, 'POLYGON', 'XY');
CREATE TABLE equipment(pk_equipment INTEGER PRIMARY KEY AUTOINCREMENT,id_equipment INTEGER,lpk_descriptionsystem INTEGER,equipmentcategory TEXT,lid_resource_1 INTEGER,lid_descriptionsystem_1 INTEGER,equipmenttype TEXT,equipmentsubtype TEXT,volume REAL,tanknumber INTEGER,elevationsql REAL,elevationculvert REAL,elevationoverflow REAL,diameter REAL,meternumber INTEGER,metertype TEXT,totaldynamichead REAL,depthequipment REAL,X REAL,dX REAL,Y REAL,dY REAL,Z REAL,dZ REAL,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('equipment','geom',2154, 'LINESTRING', 'XY');
CREATE TABLE environment(pk_environment INTEGER PRIMARY KEY AUTOINCREMENT,id_environment INTEGER,lpk_descriptionsystem INTEGER,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('environment','geom',2154, 'LINESTRING', 'XY');
CREATE TABLE observation(pk_observation INTEGER PRIMARY KEY AUTOINCREMENT,id_observation INTEGER,lpk_object INTEGER,datetimeobservation TEXT,source TEXT,number INTEGER,conditionglobal INTEGER,gravity TEXT,progression TEXT,nextactiontype TEXT,nextactioncomment TEXT,nextactiontypecomment TEXT,lid_delivery INTEGER,lid_deficiency INTEGER,conditioncover INTEGER,conditionstep INTEGER,conditionmanhole INTEGER,watercountervalue INTEGER,FOREIGN KEY(lpk_object) REFERENCES object(pk_object));
CREATE TABLE profile(pk_profile INTEGER PRIMARY KEY AUTOINCREMENT,id_profile INTEGER,lpk_descriptionsystem INTEGER,dateprofile TEXT,profiletype TEXT,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_descriptionsystem) REFERENCES descriptionsystem(pk_descriptionsystem));
SELECT AddGeometryColumn('profile','geom',2154, 'LINESTRING', 'XY');
CREATE TABLE graph(pk_graph INTEGER PRIMARY KEY AUTOINCREMENT,id_graph INTEGER,lpk_resource INTEGER,graphtype TEXT,graphsubtype TEXT,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
CREATE TABLE model(pk_model INTEGER PRIMARY KEY AUTOINCREMENT,id_model INTEGER,lpk_resource INTEGER,software TEXT,scenario TEXT,conclusions TEXT,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
CREATE TABLE report(pk_report INTEGER PRIMARY KEY AUTOINCREMENT,id_report INTEGER,lpk_resource INTEGER,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
SELECT AddGeometryColumn('report','geom',2154, 'MULTIPOLYGON', 'XY');
CREATE TABLE media(pk_media INTEGER PRIMARY KEY AUTOINCREMENT,id_media INTEGER,lpk_resource INTEGER,typemedia TEXT,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
SELECT AddGeometryColumn('media','geom',2154, 'POINT', 'XY');
CREATE TABLE rasters(pk_rasters INTEGER PRIMARY KEY AUTOINCREMENT,id_rasters INTEGER,lpk_resource INTEGER,rastertype TEXT,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
CREATE TABLE topography(pk_topography INTEGER PRIMARY KEY AUTOINCREMENT,id_topography INTEGER,lpk_resource INTEGER,FOREIGN KEY(lpk_resource) REFERENCES resource(pk_resource));
CREATE TABLE graphdata(pk_graphdata INTEGER PRIMARY KEY AUTOINCREMENT,lpk_graph INTEGER,graphnum1 REAL,graphnum2 REAL,graphchar1 TEXT,graphchar2 TEXT,FOREIGN KEY(lpk_graph) REFERENCES graph(pk_graph));
CREATE TABLE topographydata(pk_topographydata INTEGER PRIMARY KEY AUTOINCREMENT,lpk_topography INTEGER,topographydatatype TEXT,x REAL,y REAL,zgps REAL,zwgs84 REAL,raf09 REAL,zmngf REAL,accuracy TEXT,dx REAL,dy REAL,dz REAL,rodheight REAL,value1 REAL,value2 REAL,FOREIGN KEY(lpk_topography) REFERENCES topography(pk_topography));
SELECT AddGeometryColumn('topographydata','geom',2154, 'POINT', 'XY');
CREATE TABLE tcobjectactor(pk_tcobjectactor INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_actor INTEGER,lid_object INTEGER,role TEXT,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE TABLE tcobjectresource(pk_tcobjectresource INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_resource INTEGER,lid_object INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE TABLE tcobjectgeoarea(pk_tcobjectgeoarea INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_geoarea INTEGER,lid_object INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE TABLE tcdeliveryobject(pk_tcdeliveryobject INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_delivery INTEGER,lid_object INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE TABLE tcsurfacedescriptionsystem(pk_tcsurfacedescriptionsystem INTEGER PRIMARY KEY AUTOINCREMENT,lpk_revision_begin INTEGER,lpk_revision_end INTEGER,lid_surface INTEGER,lid_descriptionsystem INTEGER,FOREIGN KEY(lpk_revision_begin) REFERENCES revision(pk_revision),FOREIGN KEY(lpk_revision_end) REFERENCES revision(pk_revision));
CREATE VIEW database_django AS SELECT * FROM database
CREATE VIEW database_qgis AS SELECT * FROM database
CREATE VIEW revision_django AS SELECT * FROM revision
CREATE VIEW revision_qgis AS SELECT * FROM revision
CREATE VIEW object_django AS SELECT * FROM object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW object_qgis AS  SELECT * FROM object 
CREATE VIEW descriptionsystem_django AS SELECT descriptionsystem.*, object.* FROM descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW descriptionsystem_qgis AS  SELECT descriptionsystem.*, object.* FROM descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
CREATE VIEW event_django AS SELECT event.*, object.* FROM event INNER JOIN object ON event.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW event_qgis AS  SELECT event.*, object.* FROM event INNER JOIN object ON event.lpk_object = object.pk_object 
CREATE VIEW actor_django AS SELECT actor.*, object.* FROM actor INNER JOIN object ON actor.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW actor_qgis AS  SELECT actor.*, object.* FROM actor INNER JOIN object ON actor.lpk_object = object.pk_object 
CREATE VIEW delivery_django AS SELECT delivery.*, object.* FROM delivery INNER JOIN object ON delivery.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW delivery_qgis AS  SELECT delivery.*, object.* FROM delivery INNER JOIN object ON delivery.lpk_object = object.pk_object 
CREATE VIEW geoarea_django AS SELECT geoarea.* , object.* FROM geoarea INNER JOIN object ON geoarea.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('geoarea_django','geom','pk_geoarea','geoarea','geom',0)
CREATE VIEW geoarea_qgis AS  SELECT geoarea.* , object.* FROM geoarea INNER JOIN object ON geoarea.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('geoarea_qgis','geom','pk_geoarea','geoarea','geom',0)
CREATE VIEW deficiency_django AS SELECT deficiency.* , object.* FROM deficiency INNER JOIN object ON deficiency.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('deficiency_django','geom','pk_deficiency','deficiency','geom',0)
CREATE VIEW deficiency_qgis AS  SELECT deficiency.* , object.* FROM deficiency INNER JOIN object ON deficiency.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('deficiency_qgis','geom','pk_deficiency','deficiency','geom',0)
CREATE VIEW resource_django AS SELECT resource.*, object.* FROM resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW resource_qgis AS  SELECT resource.*, object.* FROM resource INNER JOIN object ON resource.lpk_object = object.pk_object 
CREATE VIEW edge_django AS SELECT edge.*,descriptionsystem.*, object.* FROM edge INNER JOIN descriptionsystem ON edge.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('edge_django','geom','pk_edge','edge','geom',0)
CREATE VIEW edge_qgis AS  SELECT edge.*,descriptionsystem.*, object.* FROM edge INNER JOIN descriptionsystem ON edge.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('edge_qgis','geom','pk_edge','edge','geom',0)
CREATE VIEW node_django AS SELECT node.*,descriptionsystem.*, object.* FROM node INNER JOIN descriptionsystem ON node.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON Descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('node_django','geom','pk_node','node','geom',0)
CREATE VIEW node_qgis AS  SELECT node.*, descriptionsystem.*, object.* FROM node INNER JOIN descriptionsystem ON node.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('node_qgis','geom','pk_node','node','geom',0)
CREATE VIEW surface_django AS SELECT surface.*,descriptionsystem.*, object.* FROM surface INNER JOIN descriptionsystem ON surface.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON Descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('surface_django','geom','pk_surface','surface','geom',0)
CREATE VIEW surface_qgis AS  SELECT surface.*, descriptionsystem.*, object.* FROM surface INNER JOIN descriptionsystem ON surface.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('surface_qgis','geom','pk_surface','surface','geom',0)
CREATE VIEW facility_django AS SELECT facility.*, descriptionsystem.*,object.* FROM facility INNER JOIN descriptionsystem ON facility.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('facility_django','geom','pk_facility','facility','geom',0)
CREATE VIEW facility_qgis AS  SELECT facility.*, descriptionsystem.*, object.* FROM facility INNER JOIN descriptionsystem ON facility.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('facility_qgis','geom','pk_facility','facility','geom',0)
CREATE VIEW equipment_django AS SELECT equipment.*, descriptionsystem.*,object.* FROM equipment INNER JOIN descriptionsystem ON equipment.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('equipment_django','geom','pk_equipment','equipment','geom',0)
CREATE VIEW equipment_qgis AS  SELECT equipment.*, descriptionsystem.*, object.* FROM equipment INNER JOIN descriptionsystem ON equipment.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('equipment_qgis','geom','pk_equipment','equipment','geom',0)
CREATE VIEW environment_django AS SELECT environment.*, descriptionsystem.*, object.* FROM environment INNER JOIN descriptionsystem ON environment.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('environment_django','geom','pk_environment','environment','geom',0)
CREATE VIEW environment_qgis AS  SELECT environment.*, descriptionsystem.*, object.* FROM environment INNER JOIN descriptionsystem ON environment.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('environment_qgis','geom','pk_environment','environment','geom',0)
CREATE VIEW observation_django AS SELECT observation.* , object.* FROM observation INNER JOIN object ON observation.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW observation_qgis AS  SELECT observation.* , object.* FROM observation INNER JOIN object ON observation.lpk_object = object.pk_object 
CREATE VIEW profile_django AS SELECT profile.*, descriptionsystem.*, object.* FROM profile INNER JOIN descriptionsystem ON profile.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('profile_django','geom','pk_profile','profile','geom',0)
CREATE VIEW profile_qgis AS  SELECT profile.*, descriptionsystem.*, object.* FROM profile INNER JOIN Descriptionsystem ON profile.lpk_descriptionsystem = descriptionsystem.pk_descriptionsystem INNER JOIN object ON descriptionsystem.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('profile_qgis','geom','pk_profile','profile','geom',0)
CREATE VIEW graph_django AS SELECT graph.*, resource.*, object.* FROM graph INNER JOIN resource ON graph.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW graph_qgis AS  SELECT graph.*, resource.*, object.* FROM graph INNER JOIN resource ON graph.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
CREATE VIEW model_django AS SELECT model.* ,resource.*, object.* FROM model INNER JOIN resource ON model.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW model_qgis AS  SELECT model.* ,resource.*, object.* FROM model INNER JOIN resource ON model.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
CREATE VIEW report_django AS SELECT report.*, resource.*, object.* FROM report INNER JOIN resource ON report.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('report_django','geom','pk_report','report','geom',0)
CREATE VIEW report_qgis AS  SELECT report.*, resource.*, object.* FROM report INNER JOIN resource ON report.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('report_qgis','geom','pk_report','report','geom',0)
CREATE VIEW media_django AS SELECT media.*, resource.*, object.* FROM media INNER JOIN resource ON media.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('media_django','geom','pk_media','media','geom',0)
CREATE VIEW media_qgis AS  SELECT media.*, resource.*, object.* FROM media INNER JOIN resource ON media.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('media_qgis','geom','pk_media','media','geom',0)
CREATE VIEW rasters_django AS SELECT rasters.*, resource.*, object.* FROM rasters INNER JOIN resource ON rasters.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW rasters_qgis AS  SELECT rasters.*, resource.*, object.*FROM rasters INNER JOIN resource ON rasters.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
CREATE VIEW topography_django AS SELECT topography.*, resource.*, object.* FROM topography INNER JOIN resource ON topography.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object WHERE object.lpk_revision_end IS NULL AND object.datetimedestruction IS NULL
CREATE VIEW topography_qgis AS  SELECT topography.*, resource.*, object.* FROM topography INNER JOIN resource ON topography.lpk_resource = resource.pk_resource INNER JOIN object ON resource.lpk_object = object.pk_object 
CREATE VIEW graphdata_django AS SELECT graphdata.* FROM graphdata
CREATE VIEW graphdata_qgis AS  SELECT graphdata.* FROM graphdata 
CREATE VIEW topographydata_django AS SELECT topographydata.* FROM topographydata
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('topographydata_django','geom','pk_topographydata','topographydata','geom',0)
CREATE VIEW topographydata_qgis AS  SELECT topographydata.* FROM topographydata 
INSERT INTO views_geometry_columns (view_name, view_geometry, view_rowid, f_table_name, f_geometry_column,read_only) VALUES ('topographydata_qgis','geom','pk_topographydata','topographydata','geom',0)
CREATE VIEW tcobjectactor_django AS SELECT * FROM tcobjectactor WHERE lpk_revision_end IS NULL
CREATE VIEW tcobjectactor_qgis AS  SELECT * FROM tcobjectactor 
CREATE VIEW tcobjectresource_django AS SELECT * FROM tcobjectresource WHERE lpk_revision_end IS NULL
CREATE VIEW tcobjectresource_qgis AS  SELECT * FROM tcobjectresource 
CREATE VIEW tcobjectgeoarea_django AS SELECT * FROM tcobjectgeoarea WHERE lpk_revision_end IS NULL
CREATE VIEW tcobjectgeoarea_qgis AS  SELECT * FROM tcobjectgeoarea 
CREATE VIEW tcdeliveryobject_django AS SELECT * FROM tcdeliveryobject WHERE lpk_revision_end IS NULL
CREATE VIEW tcdeliveryobject_qgis AS  SELECT * FROM tcdeliveryobject 
CREATE VIEW tcsurfacedescriptionsystem_django AS SELECT * FROM tcsurfacedescriptionsystem WHERE lpk_revision_end IS NULL
CREATE VIEW tcsurfacedescriptionsystem_qgis AS  SELECT * FROM tcsurfacedescriptionsystem 
